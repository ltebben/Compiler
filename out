[]
declare i64 @"getbool"() 

[]
declare i64 @"getinteger"() 

[]
declare double @"getfloat"() 

(<<class 'llvmlite.ir.types.PointerType'> [256 x i8]*>,)
declare i64 @"getstring"([256 x i8]* %".1") 

(<<class 'llvmlite.ir.types.IntType'> i64>,)
declare i64 @"putbool"(i64 %".1") 

(<<class 'llvmlite.ir.types.IntType'> i64>,)
declare i64 @"putinteger"(i64 %".1") 

(<<class 'llvmlite.ir.types.DoubleType'> double>,)
declare i64 @"putfloat"(double %".1") 

(<<class 'llvmlite.ir.types.PointerType'> [256 x i8]*>,)
declare i64 @"putstring"([256 x i8]* %".1") 

(<<class 'llvmlite.ir.types.IntType'> i64>,)
declare double @"sqrtt"(i64 %".1") 

(<<class 'llvmlite.ir.types.PointerType'> [256 x i8]*>, <<class 'llvmlite.ir.types.PointerType'> [256 x i8]*>)
declare i64 @"strcomp"([256 x i8]* %".1", [256 x i8]* %".2") 

expanding program
expanding program header
returning: (Keyword,program)
returning: (Identifier,maths)
returning: (Keyword,is)
expanding program body
returning: (Keyword,variable)
expanding declaration
expanding variable declaration
returning: (Identifier,value)
returning: (Colon,:)
expanding type mark
returning: (Keyword,integer)
returning: (Semicolon,;)
returning: (Keyword,variable)
expanding declaration
expanding variable declaration
returning: (Identifier,tmp)
returning: (Colon,:)
expanding type mark
returning: (Keyword,integer)
returning: (Semicolon,;)
returning: (Keyword,global)
expanding declaration
returning: (Keyword,variable)
expanding variable declaration
returning: (Identifier,out)
returning: (Colon,:)
expanding type mark
returning: (Keyword,bool)
returning: (Semicolon,;)
returning: (Keyword,procedure)
expanding declaration
expanding procedure declaration
expanding procedure header
returning: (Identifier,fib)
returning: (Colon,:)
expanding type mark
returning: (Keyword,integer)
returning: (Paren,()
returning: (Keyword,variable)
expanding parameter list
expanding parameter
expanding variable declaration
returning: (Identifier,val)
returning: (Colon,:)
expanding type mark
returning: (Keyword,integer)
returning: (Paren,))
val
(<ir.Argument '.1' of type i64>,)
expanding procedure body
returning: (Keyword,variable)
('Keyword', 'variable')
expanding declaration
expanding variable declaration
returning: (Identifier,tmp1)
returning: (Colon,:)
expanding type mark
returning: (Keyword,integer)
returning: (Semicolon,;)
('Semicolon', ';')
returning: (Keyword,variable)
expanding declaration
expanding variable declaration
returning: (Identifier,tmp2)
returning: (Colon,:)
expanding type mark
returning: (Keyword,integer)
returning: (Semicolon,;)
('Semicolon', ';')
returning: (Keyword,variable)
expanding declaration
expanding variable declaration
returning: (Identifier,ret)
returning: (Colon,:)
expanding type mark
returning: (Keyword,integer)
returning: (Semicolon,;)
('Semicolon', ';')
returning: (Keyword,begin)
FOUND THE PROCEDURE BEGIN
returning: (Keyword,if)
expanding statement
('Keyword', 'if')
expanding if statement
returning: (Paren,()
expanding expression
returning: (Identifier,val)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'val')
name or procedure call?
expanding name or procedure
('Identifier', 'val')
returning: (Identifier,==)
expanding name
{'type': 'integer', 'bound': None, 'global': False, 'procedure': False, 'val': <ir.AllocaInstr 'val' of type 'i64*', opname 'alloca', operands ()>}
type in name_or_procedure: integer
type in factor: integer
AT THE END OF FACTOR, val= 
%".4" = load i64, i64* %"val"
value in term after factor is ('Identifier', '==')
integer
value in relation after term is ('Identifier', '==')
expanding relation
expanding term
expanding factor
returning: (Digit,0)
in factor ('Digit', '0')
acceptable: digit
type in factor: integer
AT THE END OF FACTOR, val= 
i64 0
returning: (Paren,))
value in term after factor is ('Paren', ')')
integer
value in relation after term is ('Paren', ')')
integer
integer integer
integer
%".4" = load i64, i64* %"val" i64 0
%".6" = zext i1 %".5" to i64
bool
value in arithop after relation is ('Paren', ')')
val in expression after arithOp is %".6" = zext i1 %".5" to i64 bool
%".6" = zext i1 %".5" to i64
bool
returning: (Keyword,then)
expanding statement
returning: (Identifier,ret)
('Identifier', 'ret')
expanding assignment statement
expanding destination
returning: (Assignment,:=)
('Assignment', ':=')
{'type': 'integer', 'bound': None, 'global': False, 'procedure': False, 'val': <ir.AllocaInstr 'ret' of type 'i64*', opname 'alloca', operands ()>}
expanding expression
returning: (Digit,0)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Digit', '0')
acceptable: digit
type in factor: integer
AT THE END OF FACTOR, val= 
i64 0
returning: (Semicolon,;)
value in term after factor is ('Semicolon', ';')
integer
value in relation after term is ('Semicolon', ';')
integer
value in arithop after relation is ('Semicolon', ';')
val in expression after arithOp is i64 0 integer
type in assignment_statement: integer
i64 0
mem loc is
%"ret" = alloca i64
returning: (Keyword,return)
expanding statement
('Keyword', 'return')
expanding return statement
expanding expression
returning: (Identifier,ret)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'ret')
name or procedure call?
expanding name or procedure
('Identifier', 'ret')
returning: (Semicolon,;)
expanding name
{'type': 'integer', 'bound': None, 'global': False, 'procedure': False, 'val': <ir.AllocaInstr 'ret' of type 'i64*', opname 'alloca', operands ()>}
type in name_or_procedure: integer
type in factor: integer
AT THE END OF FACTOR, val= 
%".10" = load i64, i64* %"ret"
value in term after factor is ('Semicolon', ';')
integer
value in relation after term is ('Semicolon', ';')
integer
value in arithop after relation is ('Semicolon', ';')
val in expression after arithOp is %".10" = load i64, i64* %"ret" integer
%".10" = load i64, i64* %"ret"
returning: (Keyword,end)
('Keyword', 'end')
returning: (Keyword,if)
returning: (Semicolon,;)
returning: (Keyword,if)
expanding statement
('Keyword', 'if')
expanding if statement
returning: (Paren,()
expanding expression
returning: (Identifier,val)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'val')
name or procedure call?
expanding name or procedure
('Identifier', 'val')
returning: (Identifier,==)
expanding name
{'type': 'integer', 'bound': None, 'global': False, 'procedure': False, 'val': <ir.AllocaInstr 'val' of type 'i64*', opname 'alloca', operands ()>}
type in name_or_procedure: integer
type in factor: integer
AT THE END OF FACTOR, val= 
%".13" = load i64, i64* %"val"
value in term after factor is ('Identifier', '==')
integer
value in relation after term is ('Identifier', '==')
expanding relation
expanding term
expanding factor
returning: (Digit,1)
in factor ('Digit', '1')
acceptable: digit
type in factor: integer
AT THE END OF FACTOR, val= 
i64 1
returning: (Paren,))
value in term after factor is ('Paren', ')')
integer
value in relation after term is ('Paren', ')')
integer
integer integer
integer
%".13" = load i64, i64* %"val" i64 1
%".15" = zext i1 %".14" to i64
bool
value in arithop after relation is ('Paren', ')')
val in expression after arithOp is %".15" = zext i1 %".14" to i64 bool
%".15" = zext i1 %".14" to i64
bool
returning: (Keyword,then)
expanding statement
returning: (Identifier,ret)
('Identifier', 'ret')
expanding assignment statement
expanding destination
returning: (Assignment,:=)
('Assignment', ':=')
{'type': 'integer', 'bound': None, 'global': False, 'procedure': False, 'val': <ir.AllocaInstr 'ret' of type 'i64*', opname 'alloca', operands ()>}
expanding expression
returning: (Digit,1)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Digit', '1')
acceptable: digit
type in factor: integer
AT THE END OF FACTOR, val= 
i64 1
returning: (Semicolon,;)
value in term after factor is ('Semicolon', ';')
integer
value in relation after term is ('Semicolon', ';')
integer
value in arithop after relation is ('Semicolon', ';')
val in expression after arithOp is i64 1 integer
type in assignment_statement: integer
i64 1
mem loc is
%"ret" = alloca i64
returning: (Keyword,return)
expanding statement
('Keyword', 'return')
expanding return statement
expanding expression
returning: (Identifier,ret)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'ret')
name or procedure call?
expanding name or procedure
('Identifier', 'ret')
returning: (Semicolon,;)
expanding name
{'type': 'integer', 'bound': None, 'global': False, 'procedure': False, 'val': <ir.AllocaInstr 'ret' of type 'i64*', opname 'alloca', operands ()>}
type in name_or_procedure: integer
type in factor: integer
AT THE END OF FACTOR, val= 
%".19" = load i64, i64* %"ret"
value in term after factor is ('Semicolon', ';')
integer
value in relation after term is ('Semicolon', ';')
integer
value in arithop after relation is ('Semicolon', ';')
val in expression after arithOp is %".19" = load i64, i64* %"ret" integer
%".19" = load i64, i64* %"ret"
returning: (Keyword,end)
('Keyword', 'end')
returning: (Keyword,if)
returning: (Semicolon,;)
returning: (Identifier,val)
expanding statement
('Identifier', 'val')
expanding assignment statement
expanding destination
returning: (Assignment,:=)
('Assignment', ':=')
{'type': 'integer', 'bound': None, 'global': False, 'procedure': False, 'val': <ir.AllocaInstr 'val' of type 'i64*', opname 'alloca', operands ()>}
expanding expression
returning: (Identifier,val)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'val')
name or procedure call?
expanding name or procedure
('Identifier', 'val')
returning: (ArithOp,-)
expanding name
{'type': 'integer', 'bound': None, 'global': False, 'procedure': False, 'val': <ir.AllocaInstr 'val' of type 'i64*', opname 'alloca', operands ()>}
type in name_or_procedure: integer
type in factor: integer
AT THE END OF FACTOR, val= 
%".22" = load i64, i64* %"val"
value in term after factor is ('ArithOp', '-')
integer
value in relation after term is ('ArithOp', '-')
integer
value in arithop after relation is ('ArithOp', '-')
expanding arithOp
expanding relation
expanding term
expanding factor
returning: (Digit,1)
in factor ('Digit', '1')
acceptable: digit
type in factor: integer
AT THE END OF FACTOR, val= 
i64 1
returning: (Semicolon,;)
value in term after factor is ('Semicolon', ';')
integer
value in relation after term is ('Semicolon', ';')
integer
value in arithop after relation is ('Semicolon', ';')
integer
val in expression after arithOp is %".23" = sub i64 %".22", 1 integer
type in assignment_statement: integer
%".23" = sub i64 %".22", 1
mem loc is
%"val" = alloca i64
returning: (Identifier,tmp1)
expanding statement
('Identifier', 'tmp1')
expanding assignment statement
expanding destination
returning: (Assignment,:=)
('Assignment', ':=')
{'type': 'integer', 'bound': None, 'global': False, 'procedure': False, 'val': <ir.AllocaInstr 'tmp1' of type 'i64*', opname 'alloca', operands ()>}
expanding expression
returning: (Identifier,fib)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'fib')
name or procedure call?
expanding name or procedure
('Identifier', 'fib')
returning: (Paren,()
expanding procedure call
in expand procedure call:  ('Paren', '(')
returning: (Identifier,val)
('Identifier', 'fib')
expanding argument list
expanding expression
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'val')
name or procedure call?
expanding name or procedure
('Identifier', 'val')
returning: (Paren,))
expanding name
{'type': 'integer', 'bound': None, 'global': False, 'procedure': False, 'val': <ir.AllocaInstr 'val' of type 'i64*', opname 'alloca', operands ()>}
type in name_or_procedure: integer
type in factor: integer
AT THE END OF FACTOR, val= 
%".25" = load i64, i64* %"val"
value in term after factor is ('Paren', ')')
integer
value in relation after term is ('Paren', ')')
integer
value in arithop after relation is ('Paren', ')')
val in expression after arithOp is %".25" = load i64, i64* %"val" integer
val in argument list after expression ('Paren', ')')
[(<ir.LoadInstr '.25' of type 'i64', opname 'load', operands [<ir.AllocaInstr 'val' of type 'i64*', opname 'alloca', operands ()>]>, 'integer')]
arglist is: 
(<ir.LoadInstr '.25' of type 'i64', opname 'load', operands [<ir.AllocaInstr 'val' of type 'i64*', opname 'alloca', operands ()>]>, 'integer')
[<ir.LoadInstr '.25' of type 'i64', opname 'load', operands [<ir.AllocaInstr 'val' of type 'i64*', opname 'alloca', operands ()>]>]
Here I am right before the die
define i64 @"001e56f7-21da-4864-8599-c478a6e8184a"(i64 %".1") 
{
function_entry:
  %"val" = alloca i64
  store i64 %".1", i64* %"val"
  %"tmp1" = alloca i64
  %"tmp2" = alloca i64
  %"ret" = alloca i64
  %".4" = load i64, i64* %"val"
  %".5" = icmp eq i64 %".4", 0
  %".6" = zext i1 %".5" to i64
  %".7" = icmp eq i64 1, %".6"
  br i1 %".7", label %"function_entry.if", label %"function_entry.else"
function_entry.if:
  store i64 0, i64* %"ret"
  %".10" = load i64, i64* %"ret"
  ret i64 %".10"
function_entry.else:
  br label %"function_entry.endif"
function_entry.endif:
  %".13" = load i64, i64* %"val"
  %".14" = icmp eq i64 %".13", 1
  %".15" = zext i1 %".14" to i64
  %".16" = icmp eq i64 1, %".15"
  br i1 %".16", label %"function_entry.endif.if", label %"function_entry.endif.else"
function_entry.endif.if:
  store i64 1, i64* %"ret"
  %".19" = load i64, i64* %"ret"
  ret i64 %".19"
function_entry.endif.else:
  br label %"function_entry.endif.endif"
function_entry.endif.endif:
  %".22" = load i64, i64* %"val"
  %".23" = sub i64 %".22", 1
  store i64 %".23", i64* %"val"
  %".25" = load i64, i64* %"val"
}
 [<ir.LoadInstr '.25' of type 'i64', opname 'load', operands [<ir.AllocaInstr 'val' of type 'i64*', opname 'alloca', operands ()>]>]
and here:  %".26" = call i64 @"001e56f7-21da-4864-8599-c478a6e8184a"(i64 %".25")
type in name_or_procedure: integer
type in factor: integer
AT THE END OF FACTOR, val= 
%".26" = call i64 @"001e56f7-21da-4864-8599-c478a6e8184a"(i64 %".25")
returning: (Semicolon,;)
value in term after factor is ('Semicolon', ';')
integer
value in relation after term is ('Semicolon', ';')
integer
value in arithop after relation is ('Semicolon', ';')
val in expression after arithOp is %".26" = call i64 @"001e56f7-21da-4864-8599-c478a6e8184a"(i64 %".25") integer
type in assignment_statement: integer
%".26" = call i64 @"001e56f7-21da-4864-8599-c478a6e8184a"(i64 %".25")
mem loc is
%"tmp1" = alloca i64
returning: (Identifier,val)
expanding statement
('Identifier', 'val')
expanding assignment statement
expanding destination
returning: (Assignment,:=)
('Assignment', ':=')
{'type': 'integer', 'bound': None, 'global': False, 'procedure': False, 'val': <ir.AllocaInstr 'val' of type 'i64*', opname 'alloca', operands ()>}
expanding expression
returning: (Identifier,val)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'val')
name or procedure call?
expanding name or procedure
('Identifier', 'val')
returning: (ArithOp,-)
expanding name
{'type': 'integer', 'bound': None, 'global': False, 'procedure': False, 'val': <ir.AllocaInstr 'val' of type 'i64*', opname 'alloca', operands ()>}
type in name_or_procedure: integer
type in factor: integer
AT THE END OF FACTOR, val= 
%".28" = load i64, i64* %"val"
value in term after factor is ('ArithOp', '-')
integer
value in relation after term is ('ArithOp', '-')
integer
value in arithop after relation is ('ArithOp', '-')
expanding arithOp
expanding relation
expanding term
expanding factor
returning: (Digit,1)
in factor ('Digit', '1')
acceptable: digit
type in factor: integer
AT THE END OF FACTOR, val= 
i64 1
returning: (Semicolon,;)
value in term after factor is ('Semicolon', ';')
integer
value in relation after term is ('Semicolon', ';')
integer
value in arithop after relation is ('Semicolon', ';')
integer
val in expression after arithOp is %".29" = sub i64 %".28", 1 integer
type in assignment_statement: integer
%".29" = sub i64 %".28", 1
mem loc is
%"val" = alloca i64
returning: (Identifier,tmp2)
expanding statement
('Identifier', 'tmp2')
expanding assignment statement
expanding destination
returning: (Assignment,:=)
('Assignment', ':=')
{'type': 'integer', 'bound': None, 'global': False, 'procedure': False, 'val': <ir.AllocaInstr 'tmp2' of type 'i64*', opname 'alloca', operands ()>}
expanding expression
returning: (Identifier,fib)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'fib')
name or procedure call?
expanding name or procedure
('Identifier', 'fib')
returning: (Paren,()
expanding procedure call
in expand procedure call:  ('Paren', '(')
returning: (Identifier,val)
('Identifier', 'fib')
expanding argument list
expanding expression
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'val')
name or procedure call?
expanding name or procedure
('Identifier', 'val')
returning: (Paren,))
expanding name
{'type': 'integer', 'bound': None, 'global': False, 'procedure': False, 'val': <ir.AllocaInstr 'val' of type 'i64*', opname 'alloca', operands ()>}
type in name_or_procedure: integer
type in factor: integer
AT THE END OF FACTOR, val= 
%".31" = load i64, i64* %"val"
value in term after factor is ('Paren', ')')
integer
value in relation after term is ('Paren', ')')
integer
value in arithop after relation is ('Paren', ')')
val in expression after arithOp is %".31" = load i64, i64* %"val" integer
val in argument list after expression ('Paren', ')')
[(<ir.LoadInstr '.31' of type 'i64', opname 'load', operands [<ir.AllocaInstr 'val' of type 'i64*', opname 'alloca', operands ()>]>, 'integer')]
arglist is: 
(<ir.LoadInstr '.31' of type 'i64', opname 'load', operands [<ir.AllocaInstr 'val' of type 'i64*', opname 'alloca', operands ()>]>, 'integer')
[<ir.LoadInstr '.31' of type 'i64', opname 'load', operands [<ir.AllocaInstr 'val' of type 'i64*', opname 'alloca', operands ()>]>]
Here I am right before the die
define i64 @"001e56f7-21da-4864-8599-c478a6e8184a"(i64 %".1") 
{
function_entry:
  %"val" = alloca i64
  store i64 %".1", i64* %"val"
  %"tmp1" = alloca i64
  %"tmp2" = alloca i64
  %"ret" = alloca i64
  %".4" = load i64, i64* %"val"
  %".5" = icmp eq i64 %".4", 0
  %".6" = zext i1 %".5" to i64
  %".7" = icmp eq i64 1, %".6"
  br i1 %".7", label %"function_entry.if", label %"function_entry.else"
function_entry.if:
  store i64 0, i64* %"ret"
  %".10" = load i64, i64* %"ret"
  ret i64 %".10"
function_entry.else:
  br label %"function_entry.endif"
function_entry.endif:
  %".13" = load i64, i64* %"val"
  %".14" = icmp eq i64 %".13", 1
  %".15" = zext i1 %".14" to i64
  %".16" = icmp eq i64 1, %".15"
  br i1 %".16", label %"function_entry.endif.if", label %"function_entry.endif.else"
function_entry.endif.if:
  store i64 1, i64* %"ret"
  %".19" = load i64, i64* %"ret"
  ret i64 %".19"
function_entry.endif.else:
  br label %"function_entry.endif.endif"
function_entry.endif.endif:
  %".22" = load i64, i64* %"val"
  %".23" = sub i64 %".22", 1
  store i64 %".23", i64* %"val"
  %".25" = load i64, i64* %"val"
  %".26" = call i64 @"001e56f7-21da-4864-8599-c478a6e8184a"(i64 %".25")
  store i64 %".26", i64* %"tmp1"
  %".28" = load i64, i64* %"val"
  %".29" = sub i64 %".28", 1
  store i64 %".29", i64* %"val"
  %".31" = load i64, i64* %"val"
}
 [<ir.LoadInstr '.31' of type 'i64', opname 'load', operands [<ir.AllocaInstr 'val' of type 'i64*', opname 'alloca', operands ()>]>]
and here:  %".32" = call i64 @"001e56f7-21da-4864-8599-c478a6e8184a"(i64 %".31")
type in name_or_procedure: integer
type in factor: integer
AT THE END OF FACTOR, val= 
%".32" = call i64 @"001e56f7-21da-4864-8599-c478a6e8184a"(i64 %".31")
returning: (Semicolon,;)
value in term after factor is ('Semicolon', ';')
integer
value in relation after term is ('Semicolon', ';')
integer
value in arithop after relation is ('Semicolon', ';')
val in expression after arithOp is %".32" = call i64 @"001e56f7-21da-4864-8599-c478a6e8184a"(i64 %".31") integer
type in assignment_statement: integer
%".32" = call i64 @"001e56f7-21da-4864-8599-c478a6e8184a"(i64 %".31")
mem loc is
%"tmp2" = alloca i64
returning: (Identifier,ret)
expanding statement
('Identifier', 'ret')
expanding assignment statement
expanding destination
returning: (Assignment,:=)
('Assignment', ':=')
{'type': 'integer', 'bound': None, 'global': False, 'procedure': False, 'val': <ir.AllocaInstr 'ret' of type 'i64*', opname 'alloca', operands ()>}
expanding expression
returning: (Identifier,tmp1)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'tmp1')
name or procedure call?
expanding name or procedure
('Identifier', 'tmp1')
returning: (ArithOp,+)
expanding name
{'type': 'integer', 'bound': None, 'global': False, 'procedure': False, 'val': <ir.AllocaInstr 'tmp1' of type 'i64*', opname 'alloca', operands ()>}
type in name_or_procedure: integer
type in factor: integer
AT THE END OF FACTOR, val= 
%".34" = load i64, i64* %"tmp1"
value in term after factor is ('ArithOp', '+')
integer
value in relation after term is ('ArithOp', '+')
integer
value in arithop after relation is ('ArithOp', '+')
expanding arithOp
expanding relation
expanding term
expanding factor
returning: (Identifier,tmp2)
in factor ('Identifier', 'tmp2')
name or procedure call?
expanding name or procedure
('Identifier', 'tmp2')
returning: (Semicolon,;)
expanding name
{'type': 'integer', 'bound': None, 'global': False, 'procedure': False, 'val': <ir.AllocaInstr 'tmp2' of type 'i64*', opname 'alloca', operands ()>}
type in name_or_procedure: integer
type in factor: integer
AT THE END OF FACTOR, val= 
%".35" = load i64, i64* %"tmp2"
value in term after factor is ('Semicolon', ';')
integer
value in relation after term is ('Semicolon', ';')
integer
value in arithop after relation is ('Semicolon', ';')
integer
ADDING IN ARITHOP
%".34" = load i64, i64* %"tmp1"
%".35" = load i64, i64* %"tmp2"
val in expression after arithOp is %".36" = add i64 %".34", %".35" integer
type in assignment_statement: integer
%".36" = add i64 %".34", %".35"
mem loc is
%"ret" = alloca i64
returning: (Keyword,return)
expanding statement
('Keyword', 'return')
expanding return statement
expanding expression
returning: (Identifier,ret)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'ret')
name or procedure call?
expanding name or procedure
('Identifier', 'ret')
returning: (Semicolon,;)
expanding name
{'type': 'integer', 'bound': None, 'global': False, 'procedure': False, 'val': <ir.AllocaInstr 'ret' of type 'i64*', opname 'alloca', operands ()>}
type in name_or_procedure: integer
type in factor: integer
AT THE END OF FACTOR, val= 
%".38" = load i64, i64* %"ret"
value in term after factor is ('Semicolon', ';')
integer
value in relation after term is ('Semicolon', ';')
integer
value in arithop after relation is ('Semicolon', ';')
val in expression after arithOp is %".38" = load i64, i64* %"ret" integer
%".38" = load i64, i64* %"ret"
returning: (Keyword,end)
FOUND THE PROCEDURE END
returning: (Keyword,procedure)
RETURN CONTROL TO PROGRAM
returning: (Semicolon,;)
returning: (Keyword,begin)
MOVING ON TO PROGRAM CODE FINALLY
returning: (Identifier,value)
expanding statement
('Identifier', 'value')
expanding assignment statement
expanding destination
returning: (Assignment,:=)
('Assignment', ':=')
{'type': 'integer', 'bound': None, 'global': False, 'procedure': False, 'val': <ir.AllocaInstr 'value' of type 'i64*', opname 'alloca', operands ()>}
expanding expression
returning: (Identifier,fib)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'fib')
name or procedure call?
expanding name or procedure
('Identifier', 'fib')
returning: (Paren,()
expanding procedure call
in expand procedure call:  ('Paren', '(')
returning: (Digit,12)
('Identifier', 'fib')
expanding argument list
expanding expression
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Digit', '12')
acceptable: digit
type in factor: integer
AT THE END OF FACTOR, val= 
i64 12
returning: (Paren,))
value in term after factor is ('Paren', ')')
integer
value in relation after term is ('Paren', ')')
integer
value in arithop after relation is ('Paren', ')')
val in expression after arithOp is i64 12 integer
val in argument list after expression ('Paren', ')')
[(<ir.Constant type='i64' value=12>, 'integer')]
arglist is: 
(<ir.Constant type='i64' value=12>, 'integer')
[<ir.Constant type='i64' value=12>]
Here I am right before the die
define i64 @"001e56f7-21da-4864-8599-c478a6e8184a"(i64 %".1") 
{
function_entry:
  %"val" = alloca i64
  store i64 %".1", i64* %"val"
  %"tmp1" = alloca i64
  %"tmp2" = alloca i64
  %"ret" = alloca i64
  %".4" = load i64, i64* %"val"
  %".5" = icmp eq i64 %".4", 0
  %".6" = zext i1 %".5" to i64
  %".7" = icmp eq i64 1, %".6"
  br i1 %".7", label %"function_entry.if", label %"function_entry.else"
function_entry.if:
  store i64 0, i64* %"ret"
  %".10" = load i64, i64* %"ret"
  ret i64 %".10"
function_entry.else:
  br label %"function_entry.endif"
function_entry.endif:
  %".13" = load i64, i64* %"val"
  %".14" = icmp eq i64 %".13", 1
  %".15" = zext i1 %".14" to i64
  %".16" = icmp eq i64 1, %".15"
  br i1 %".16", label %"function_entry.endif.if", label %"function_entry.endif.else"
function_entry.endif.if:
  store i64 1, i64* %"ret"
  %".19" = load i64, i64* %"ret"
  ret i64 %".19"
function_entry.endif.else:
  br label %"function_entry.endif.endif"
function_entry.endif.endif:
  %".22" = load i64, i64* %"val"
  %".23" = sub i64 %".22", 1
  store i64 %".23", i64* %"val"
  %".25" = load i64, i64* %"val"
  %".26" = call i64 @"001e56f7-21da-4864-8599-c478a6e8184a"(i64 %".25")
  store i64 %".26", i64* %"tmp1"
  %".28" = load i64, i64* %"val"
  %".29" = sub i64 %".28", 1
  store i64 %".29", i64* %"val"
  %".31" = load i64, i64* %"val"
  %".32" = call i64 @"001e56f7-21da-4864-8599-c478a6e8184a"(i64 %".31")
  store i64 %".32", i64* %"tmp2"
  %".34" = load i64, i64* %"tmp1"
  %".35" = load i64, i64* %"tmp2"
  %".36" = add i64 %".34", %".35"
  store i64 %".36", i64* %"ret"
  %".38" = load i64, i64* %"ret"
  ret i64 %".38"
}
 [<ir.Constant type='i64' value=12>]
and here:  %".2" = call i64 @"001e56f7-21da-4864-8599-c478a6e8184a"(i64 12)
type in name_or_procedure: integer
type in factor: integer
AT THE END OF FACTOR, val= 
%".2" = call i64 @"001e56f7-21da-4864-8599-c478a6e8184a"(i64 12)
returning: (Semicolon,;)
value in term after factor is ('Semicolon', ';')
integer
value in relation after term is ('Semicolon', ';')
integer
value in arithop after relation is ('Semicolon', ';')
val in expression after arithOp is %".2" = call i64 @"001e56f7-21da-4864-8599-c478a6e8184a"(i64 12) integer
type in assignment_statement: integer
%".2" = call i64 @"001e56f7-21da-4864-8599-c478a6e8184a"(i64 12)
mem loc is
%"value" = alloca i64
Back in program body, tmp is ('Semicolon', ';')
returning: (Identifier,out)
expanding statement
('Identifier', 'out')
expanding assignment statement
expanding destination
returning: (Assignment,:=)
('Assignment', ':=')
{'type': 'bool', 'bound': None, 'global': True, 'procedure': False, 'val': <ir.GlobalVariable 'out' of type 'i64*'>}
expanding expression
returning: (Identifier,putinteger)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'putinteger')
name or procedure call?
expanding name or procedure
('Identifier', 'putinteger')
returning: (Paren,()
expanding procedure call
in expand procedure call:  ('Paren', '(')
returning: (Identifier,value)
('Identifier', 'putinteger')
expanding argument list
expanding expression
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'value')
name or procedure call?
expanding name or procedure
('Identifier', 'value')
returning: (Paren,))
expanding name
{'type': 'integer', 'bound': None, 'global': False, 'procedure': False, 'val': <ir.AllocaInstr 'value' of type 'i64*', opname 'alloca', operands ()>}
type in name_or_procedure: integer
type in factor: integer
AT THE END OF FACTOR, val= 
%".4" = load i64, i64* %"value"
value in term after factor is ('Paren', ')')
integer
value in relation after term is ('Paren', ')')
integer
value in arithop after relation is ('Paren', ')')
val in expression after arithOp is %".4" = load i64, i64* %"value" integer
val in argument list after expression ('Paren', ')')
[(<ir.LoadInstr '.4' of type 'i64', opname 'load', operands [<ir.AllocaInstr 'value' of type 'i64*', opname 'alloca', operands ()>]>, 'integer')]
arglist is: 
(<ir.LoadInstr '.4' of type 'i64', opname 'load', operands [<ir.AllocaInstr 'value' of type 'i64*', opname 'alloca', operands ()>]>, 'integer')
[<ir.LoadInstr '.4' of type 'i64', opname 'load', operands [<ir.AllocaInstr 'value' of type 'i64*', opname 'alloca', operands ()>]>]
Here I am right before the die
declare i64 @"putinteger"(i64 %".1") 
 [<ir.LoadInstr '.4' of type 'i64', opname 'load', operands [<ir.AllocaInstr 'value' of type 'i64*', opname 'alloca', operands ()>]>]
and here:  %".5" = call i64 @"putinteger"(i64 %".4")
type in name_or_procedure: bool
type in factor: bool
AT THE END OF FACTOR, val= 
%".5" = call i64 @"putinteger"(i64 %".4")
returning: (Semicolon,;)
value in term after factor is ('Semicolon', ';')
bool
value in relation after term is ('Semicolon', ';')
bool
value in arithop after relation is ('Semicolon', ';')
val in expression after arithOp is %".5" = call i64 @"putinteger"(i64 %".4") bool
type in assignment_statement: bool
%".5" = call i64 @"putinteger"(i64 %".4")
mem loc is
@"out" = internal global i64 undef
Back in program body, tmp is ('Semicolon', ';')
returning: (Keyword,end)
returning: (Keyword,program)
returning: (Period,.)
returning: (EOF,eof)
[{'getbool': {'type': 'bool', 'bound': None, 'global': True, 'procedure': True, 'val': <ir.Function 'getbool' of type 'i64 ()*'>}, 'getinteger': {'type': 'integer', 'bound': None, 'global': True, 'procedure': True, 'val': <ir.Function 'getinteger' of type 'i64 ()*'>}, 'getfloat': {'type': 'float', 'bound': None, 'global': True, 'procedure': True, 'val': <ir.Function 'getfloat' of type 'double ()*'>}, 'getstring': {'type': 'integer', 'bound': None, 'global': True, 'procedure': True, 'val': <ir.Function 'getstring' of type 'i64 ([256 x i8]*)*'>}, 'putbool': {'type': 'bool', 'bound': None, 'global': True, 'procedure': True, 'val': <ir.Function 'putbool' of type 'i64 (i64)*'>}, 'putinteger': {'type': 'bool', 'bound': None, 'global': True, 'procedure': True, 'val': <ir.Function 'putinteger' of type 'i64 (i64)*'>}, 'putfloat': {'type': 'bool', 'bound': None, 'global': True, 'procedure': True, 'val': <ir.Function 'putfloat' of type 'i64 (double)*'>}, 'putstring': {'type': 'bool', 'bound': None, 'global': True, 'procedure': True, 'val': <ir.Function 'putstring' of type 'i64 ([256 x i8]*)*'>}, 'sqrt': {'type': 'float', 'bound': None, 'global': True, 'procedure': True, 'val': <ir.Function 'sqrtt' of type 'double (i64)*'>}, 'strcomp': {'type': 'bool', 'bound': None, 'global': True, 'procedure': True, 'val': <ir.Function 'strcomp' of type 'i64 ([256 x i8]*, [256 x i8]*)*'>}, 'out': {'type': 'bool', 'bound': None, 'global': True, 'procedure': False, 'val': <ir.GlobalVariable 'out' of type 'i64*'>}}, {'value': {'type': 'integer', 'bound': None, 'global': False, 'procedure': False, 'val': <ir.AllocaInstr 'value' of type 'i64*', opname 'alloca', operands ()>}, 'tmp': {'type': 'integer', 'bound': None, 'global': False, 'procedure': False, 'val': <ir.AllocaInstr 'tmp' of type 'i64*', opname 'alloca', operands ()>}, 'fib': {'type': 'integer', 'bound': None, 'global': False, 'procedure': True, 'val': <ir.Function '001e56f7-21da-4864-8599-c478a6e8184a' of type 'i64 (i64)*'>}}]
; ModuleID = "program"
target triple = "unknown-unknown-unknown"
target datalayout = ""

declare i64 @"getbool"() 

declare i64 @"getinteger"() 

declare double @"getfloat"() 

declare i64 @"getstring"([256 x i8]* %".1") 

declare i64 @"putbool"(i64 %".1") 

declare i64 @"putinteger"(i64 %".1") 

declare i64 @"putfloat"(double %".1") 

declare i64 @"putstring"([256 x i8]* %".1") 

declare double @"sqrtt"(i64 %".1") 

declare i64 @"strcomp"([256 x i8]* %".1", [256 x i8]* %".2") 

define i64 @"main_function"() 
{
main_entry:
  %"value" = alloca i64
  %"tmp" = alloca i64
  %"out" = alloca i64
  %".2" = call i64 @"001e56f7-21da-4864-8599-c478a6e8184a"(i64 12)
  store i64 %".2", i64* %"value"
  %".4" = load i64, i64* %"value"
  %".5" = call i64 @"putinteger"(i64 %".4")
  store i64 %".5", i64* @"out"
  ret i64 1
}

@"out" = internal global i64 undef
define i64 @"001e56f7-21da-4864-8599-c478a6e8184a"(i64 %".1") 
{
function_entry:
  %"val" = alloca i64
  store i64 %".1", i64* %"val"
  %"tmp1" = alloca i64
  %"tmp2" = alloca i64
  %"ret" = alloca i64
  %".4" = load i64, i64* %"val"
  %".5" = icmp eq i64 %".4", 0
  %".6" = zext i1 %".5" to i64
  %".7" = icmp eq i64 1, %".6"
  br i1 %".7", label %"function_entry.if", label %"function_entry.else"
function_entry.if:
  store i64 0, i64* %"ret"
  %".10" = load i64, i64* %"ret"
  ret i64 %".10"
function_entry.else:
  br label %"function_entry.endif"
function_entry.endif:
  %".13" = load i64, i64* %"val"
  %".14" = icmp eq i64 %".13", 1
  %".15" = zext i1 %".14" to i64
  %".16" = icmp eq i64 1, %".15"
  br i1 %".16", label %"function_entry.endif.if", label %"function_entry.endif.else"
function_entry.endif.if:
  store i64 1, i64* %"ret"
  %".19" = load i64, i64* %"ret"
  ret i64 %".19"
function_entry.endif.else:
  br label %"function_entry.endif.endif"
function_entry.endif.endif:
  %".22" = load i64, i64* %"val"
  %".23" = sub i64 %".22", 1
  store i64 %".23", i64* %"val"
  %".25" = load i64, i64* %"val"
  %".26" = call i64 @"001e56f7-21da-4864-8599-c478a6e8184a"(i64 %".25")
  store i64 %".26", i64* %"tmp1"
  %".28" = load i64, i64* %"val"
  %".29" = sub i64 %".28", 1
  store i64 %".29", i64* %"val"
  %".31" = load i64, i64* %"val"
  %".32" = call i64 @"001e56f7-21da-4864-8599-c478a6e8184a"(i64 %".31")
  store i64 %".32", i64* %"tmp2"
  %".34" = load i64, i64* %"tmp1"
  %".35" = load i64, i64* %"tmp2"
  %".36" = add i64 %".34", %".35"
  store i64 %".36", i64* %"ret"
  %".38" = load i64, i64* %"ret"
  ret i64 %".38"
}

RES: 1
144
