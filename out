expanding program
expanding program header
returning: (Keyword,program)
returning: (Identifier,test_program)
returning: (Keyword,is)
expanding program body
returning: (Keyword,type)
expanding declaration
expanding type declaration
returning: (Identifier,fibb_result)
returning: (Keyword,is)
expanding type mark
returning: (Keyword,integer)
returning: (Semicolon,;)
returning: (Keyword,procedure)
expanding declaration
expanding procedure declaration
expanding procedure header
returning: (Identifier,fibb)
returning: (Colon,:)
expanding type mark
returning: (Keyword,integer)
returning: (Paren,()
expanding parameter list
expanding parameter
expanding variable declaration
returning: (Keyword,variable)
returning: (Identifier,n)
returning: (Colon,:)
expanding type mark
returning: (Keyword,integer)
returning: (Paren,))
expanding procedure body
returning: (Keyword,global)
('Keyword', 'global')
expanding declaration
returning: (Keyword,variable)
expanding variable declaration
returning: (Identifier,x)
returning: (Colon,:)
expanding type mark
returning: (Keyword,integer)
returning: (Semicolon,;)
('Semicolon', ';')
returning: (Keyword,variable)
expanding declaration
expanding variable declaration
returning: (Identifier,y)
returning: (Colon,:)
expanding type mark
returning: (Keyword,integer)
returning: (Semicolon,;)
('Semicolon', ';')
returning: (Keyword,variable)
expanding declaration
expanding variable declaration
returning: (Identifier,result)
returning: (Colon,:)
expanding type mark
returning: (Keyword,integer)
returning: (Semicolon,;)
('Semicolon', ';')
returning: (Keyword,begin)
FOUND THE PROCEDURE BEGIN
returning: (Keyword,if)
expanding statement
expanding if statement
returning: (Paren,()
expanding expression
returning: (Identifier,n)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'n')
name or procedure call?
expanding name or procedure
returning: (Relation,<)
expanding name
type in name_or_procedure: integer
type in factor: integer
symbol in factor: n
value in term after factor is ('Relation', '<')
value in relation after term is ('Relation', '<')
expanding relation
expanding term
expanding factor
returning: (Digit,0)
in factor ('Digit', '0')
acceptable: digit
type in factor: integer
symbol in factor: 0
returning: (Paren,))
value in term after factor is ('Paren', ')')
value in relation after term is ('Paren', ')')
value in arithop after relation is ('Paren', ')')
returning: (Keyword,then)
expanding statement
returning: (Identifier,result)
expanding assignment statement
expanding destination
returning: (Assignment,:=)
expanding expression
returning: (ArithOp,-)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('ArithOp', '-')
returning: (Digit,1.000)
acceptable: negative digit
type in factor: float
symbol in factor: 1.000
returning: (Semicolon,;)
value in term after factor is ('Semicolon', ';')
value in relation after term is ('Semicolon', ';')
value in arithop after relation is ('Semicolon', ';')
type in assignment_statement: float
IN ASSIGNMENT STATEMENT
returning: (Keyword,return)
expanding statement
expanding return statement
expanding expression
returning: (Identifier,result)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'result')
name or procedure call?
expanding name or procedure
returning: (Semicolon,;)
expanding name
type in name_or_procedure: integer
type in factor: integer
symbol in factor: result
value in term after factor is ('Semicolon', ';')
value in relation after term is ('Semicolon', ';')
value in arithop after relation is ('Semicolon', ';')
returning: (Keyword,end)
('Keyword', 'end')
returning: (Keyword,if)
returning: (Semicolon,;)
returning: (Keyword,if)
expanding statement
expanding if statement
returning: (Paren,()
expanding expression
returning: (Identifier,n)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'n')
name or procedure call?
expanding name or procedure
returning: (Identifier,==)
expanding name
type in name_or_procedure: integer
type in factor: integer
symbol in factor: n
value in term after factor is ('Identifier', '==')
value in relation after term is ('Identifier', '==')
expanding relation
expanding term
expanding factor
returning: (Digit,0)
in factor ('Digit', '0')
acceptable: digit
type in factor: integer
symbol in factor: 0
returning: (Paren,))
value in term after factor is ('Paren', ')')
value in relation after term is ('Paren', ')')
value in arithop after relation is ('Paren', ')')
returning: (Keyword,then)
expanding statement
returning: (Identifier,result)
expanding assignment statement
expanding destination
returning: (Assignment,:=)
expanding expression
returning: (Digit,0)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Digit', '0')
acceptable: digit
type in factor: integer
symbol in factor: 0
returning: (Semicolon,;)
value in term after factor is ('Semicolon', ';')
value in relation after term is ('Semicolon', ';')
value in arithop after relation is ('Semicolon', ';')
type in assignment_statement: integer
IN ASSIGNMENT STATEMENT
returning: (Keyword,return)
expanding statement
expanding return statement
expanding expression
returning: (Identifier,result)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'result')
name or procedure call?
expanding name or procedure
returning: (Semicolon,;)
expanding name
type in name_or_procedure: integer
type in factor: integer
symbol in factor: result
value in term after factor is ('Semicolon', ';')
value in relation after term is ('Semicolon', ';')
value in arithop after relation is ('Semicolon', ';')
returning: (Keyword,end)
('Keyword', 'end')
returning: (Keyword,if)
returning: (Semicolon,;)
returning: (Keyword,if)
expanding statement
expanding if statement
returning: (Paren,()
expanding expression
returning: (Identifier,n)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'n')
name or procedure call?
expanding name or procedure
returning: (Identifier,==)
expanding name
type in name_or_procedure: integer
type in factor: integer
symbol in factor: n
value in term after factor is ('Identifier', '==')
value in relation after term is ('Identifier', '==')
expanding relation
expanding term
expanding factor
returning: (Digit,1)
in factor ('Digit', '1')
acceptable: digit
type in factor: integer
symbol in factor: 1
returning: (Paren,))
value in term after factor is ('Paren', ')')
value in relation after term is ('Paren', ')')
value in arithop after relation is ('Paren', ')')
returning: (Keyword,then)
expanding statement
returning: (Identifier,result)
expanding assignment statement
expanding destination
returning: (Assignment,:=)
expanding expression
returning: (Digit,1)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Digit', '1')
acceptable: digit
type in factor: integer
symbol in factor: 1
returning: (Semicolon,;)
value in term after factor is ('Semicolon', ';')
value in relation after term is ('Semicolon', ';')
value in arithop after relation is ('Semicolon', ';')
type in assignment_statement: integer
IN ASSIGNMENT STATEMENT
returning: (Keyword,return)
expanding statement
expanding return statement
expanding expression
returning: (Identifier,result)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'result')
name or procedure call?
expanding name or procedure
returning: (Semicolon,;)
expanding name
type in name_or_procedure: integer
type in factor: integer
symbol in factor: result
value in term after factor is ('Semicolon', ';')
value in relation after term is ('Semicolon', ';')
value in arithop after relation is ('Semicolon', ';')
returning: (Keyword,end)
('Keyword', 'end')
returning: (Keyword,if)
returning: (Semicolon,;)
returning: (Identifier,x)
expanding statement
expanding assignment statement
expanding destination
returning: (Assignment,:=)
expanding expression
returning: (Digit,1)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Digit', '1')
acceptable: digit
type in factor: integer
symbol in factor: 1
returning: (Semicolon,;)
value in term after factor is ('Semicolon', ';')
value in relation after term is ('Semicolon', ';')
value in arithop after relation is ('Semicolon', ';')
type in assignment_statement: integer
IN ASSIGNMENT STATEMENT
returning: (Identifier,y)
expanding statement
expanding assignment statement
expanding destination
returning: (Assignment,:=)
expanding expression
returning: (Digit,2)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Digit', '2')
acceptable: digit
type in factor: integer
symbol in factor: 2
returning: (Semicolon,;)
value in term after factor is ('Semicolon', ';')
value in relation after term is ('Semicolon', ';')
value in arithop after relation is ('Semicolon', ';')
type in assignment_statement: integer
IN ASSIGNMENT STATEMENT
returning: (Identifier,result)
expanding statement
expanding assignment statement
expanding destination
returning: (Assignment,:=)
expanding expression
returning: (Identifier,x)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'x')
name or procedure call?
expanding name or procedure
returning: (ArithOp,+)
expanding name
type in name_or_procedure: integer
type in factor: integer
symbol in factor: x
value in term after factor is ('ArithOp', '+')
value in relation after term is ('ArithOp', '+')
value in arithop after relation is ('ArithOp', '+')
expanding arithOp
expanding relation
expanding term
expanding factor
returning: (Identifier,y)
in factor ('Identifier', 'y')
name or procedure call?
expanding name or procedure
returning: (Semicolon,;)
expanding name
type in name_or_procedure: integer
type in factor: integer
symbol in factor: y
value in term after factor is ('Semicolon', ';')
value in relation after term is ('Semicolon', ';')
value in arithop after relation is ('Semicolon', ';')
type in assignment_statement: integer
IN ASSIGNMENT STATEMENT
returning: (Keyword,return)
expanding statement
expanding return statement
expanding expression
returning: (Identifier,result)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'result')
name or procedure call?
expanding name or procedure
returning: (Semicolon,;)
expanding name
type in name_or_procedure: integer
type in factor: integer
symbol in factor: result
value in term after factor is ('Semicolon', ';')
value in relation after term is ('Semicolon', ';')
value in arithop after relation is ('Semicolon', ';')
returning: (Keyword,end)
FOUND THE PROCEDURE END
returning: (Keyword,procedure)
RETURN CONTROL TO PROGRAM
returning: (Semicolon,;)
returning: (Keyword,begin)
MOVING ON TO PROGRAM CODE FINALLY
returning: (Identifier,fibb_result)
expanding statement
expanding assignment statement
expanding destination
returning: (Assignment,:=)
expanding expression
returning: (Identifier,fibb)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'fibb')
name or procedure call?
expanding name or procedure
returning: (Paren,()
expanding procedure call
in expand procedure call:  ('Paren', '(')
expanding argument list
expanding expression
returning: (Digit,12)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Digit', '12')
acceptable: digit
type in factor: integer
symbol in factor: 12
returning: (Paren,))
value in term after factor is ('Paren', ')')
value in relation after term is ('Paren', ')')
value in arithop after relation is ('Paren', ')')
val in argument list after expression ('Paren', ')')
Here I am right before the die
type in name_or_procedure: integer
type in factor: integer
symbol in factor: fibb
returning: (Semicolon,;)
value in term after factor is ('Semicolon', ';')
value in relation after term is ('Semicolon', ';')
value in arithop after relation is ('Semicolon', ';')
type in assignment_statement: integer
IN ASSIGNMENT STATEMENT
Back in program body, tmp is ('Semicolon', ';')
returning: (Keyword,end)
returning: (Keyword,program)
returning: (Period,.)
returning: (EOF,eof)
[{'getbool': {'type': 'bool', 'bound': None, 'procedure': True}, 'getinteger': {'type': 'integer', 'bound': None, 'procedure': True}, 'getfloat': {'type': 'float', 'bound': None, 'procedure': True}, 'getstring': {'type': 'string', 'bound': None, 'procedure': True}, 'putbool': {'type': 'bool', 'bound': None, 'procedure': True}, 'putinteger': {'type': 'bool', 'bound': None, 'procedure': True}, 'putfloat': {'type': 'bool', 'bound': None, 'procedure': True}, 'putstring': {'type': 'bool', 'bound': None, 'procedure': True}, 'sqrt': {'type': 'float', 'bound': None, 'procedure': True}, 'x': {'type': 'integer', 'bound': None, 'procedure': False}}, {'fibb_result': {'type': 'integer', 'bound': None, 'procedure': False}, 'fibb': {'type': 'integer', 'bound': None, 'procedure': True}}]
RES: 1
; ModuleID = "program"
target triple = "unknown-unknown-unknown"
target datalayout = ""

define i64 @"main_function"() 
{
main_entry:
  %".2" = call i64 @"function"()
  ret i64 1
}

define i64 @"function"() 
{
function_entry:
  ret i64 1
}

