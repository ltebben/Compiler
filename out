; ModuleID = "program"
target triple = "unknown-unknown-unknown"
target datalayout = ""

declare i64 @"getbool"() 

declare i64 @"getinteger"() 

declare double @"getfloat"() 

declare i64 @"getstring"([256 x i8]* %".1") 

declare i64 @"putbool"(i64 %".1") 

declare i64 @"putinteger"(i64 %".1") 

declare i64 @"putfloat"(double %".1") 

declare i64 @"putstring"([256 x i8]* %".1") 

declare double @"sqrtt"(i64 %".1") 

declare i64 @"strcomp"([256 x i8]* %".1", [256 x i8]* %".2") 

define i64 @"main_function"() 
{
main_entry:
  %"x" = alloca i64
  %"i" = alloca i64
  %"max" = alloca i64
  %"tmp" = alloca i64
  %"out" = alloca i64
  %".2" = call i64 @"getinteger"()
  store i64 %".2", i64* %"max"
  store i64 0, i64* %"i"
  br label %"for_start"
for_start:
  %".6" = load i64, i64* %"i"
  %".7" = load i64, i64* %"max"
  %".8" = icmp slt i64 %".6", %".7"
  %".9" = zext i1 %".8" to i64
  %".10" = icmp eq i64 1, %".9"
  br i1 %".10", label %"for_body", label %"for_after"
for_body:
  %".12" = alloca [256 x i8]
  store [256 x i8] c"result at \0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", [256 x i8]* %".12"
  %".14" = call i64 @"putstring"([256 x i8]* %".12")
  store i64 %".14", i64* %"out"
  %".16" = load i64, i64* %"i"
  %".17" = call i64 @"putinteger"(i64 %".16")
  store i64 %".17", i64* %"out"
  %".19" = load i64, i64* %"i"
  %".20" = call i64 @"b9e1a93c-bb59-4d28-a567-07b62ed48ce5"(i64 %".19")
  store i64 %".20", i64* @"x"
  %".22" = alloca [256 x i8]
  store [256 x i8] c"is: \0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", [256 x i8]* %".22"
  %".24" = call i64 @"putstring"([256 x i8]* %".22")
  store i64 %".24", i64* %"out"
  %".26" = load i64, i64* @"x"
  %".27" = call i64 @"putinteger"(i64 %".26")
  store i64 %".27", i64* %"out"
  %".29" = load i64, i64* %"i"
  %".30" = add i64 %".29", 1
  store i64 %".30", i64* %"i"
  br label %"for_start"
for_after:
  ret i64 1
}

@"x" = internal global i64 undef
define i64 @"b9e1a93c-bb59-4d28-a567-07b62ed48ce5"(i64 %".1") 
{
function_entry:
  %"val" = alloca i64
  store i64 %".1", i64* %"val"
  %"tmp" = alloca [2 x double]
  %"loopval" = alloca i64
  %"ret" = alloca i64
  %"out" = alloca i64
  %".4" = getelementptr [2 x double], [2 x double]* %"tmp", i64 0, i64 0
  %".5" = sitofp i64 -1 to double
  store double %".5", double* %".4"
  %".7" = getelementptr [2 x double], [2 x double]* %"tmp", i64 0, i64 1
  %".8" = sitofp i64 1 to double
  store double %".8", double* %".7"
  %".10" = load i64, i64* %"val"
  %".11" = call i64 @"putinteger"(i64 %".10")
  store i64 %".11", i64* @"out"
  store i64 0, i64* %"loopval"
  br label %"for_start"
for_start:
  %".15" = load i64, i64* %"loopval"
  %".16" = load i64, i64* %"val"
  %".17" = icmp sle i64 %".15", %".16"
  %".18" = zext i1 %".17" to i64
  %".19" = icmp eq i64 1, %".18"
  br i1 %".19", label %"for_body", label %"for_after"
for_body:
  %".21" = load i64, i64* %"loopval"
  %".22" = call i64 @"putinteger"(i64 %".21")
  store i64 %".22", i64* @"out"
  %".24" = getelementptr [2 x double], [2 x double]* %"tmp", i64 0, i64 0
  %".25" = load double, double* %".24"
  %".26" = getelementptr [2 x double], [2 x double]* %"tmp", i64 0, i64 1
  %".27" = load double, double* %".26"
  %".28" = fadd double %".25", %".27"
  %".29" = fptosi double %".28" to i64
  store i64 %".29", i64* %"ret"
  %".31" = getelementptr [2 x double], [2 x double]* %"tmp", i64 0, i64 1
  %".32" = load double, double* %".31"
  %".33" = getelementptr [2 x double], [2 x double]* %"tmp", i64 0, i64 0
  store double %".32", double* %".33"
  %".35" = load i64, i64* %"ret"
  %".36" = getelementptr [2 x double], [2 x double]* %"tmp", i64 0, i64 1
  %".37" = sitofp i64 %".35" to double
  store double %".37", double* %".36"
  %".39" = load i64, i64* %"loopval"
  %".40" = add i64 %".39", 1
  store i64 %".40", i64* %"loopval"
  br label %"for_start"
for_after:
  %".43" = load i64, i64* %"ret"
  ret i64 %".43"
}

@"out" = internal global i64 undef
result at 
0
0
0
is: 
0
result at 
1
1
0
1
is: 
1
result at 
2
2
0
1
2
is: 
1
result at 
3
3
0
1
2
3
is: 
2
result at 
4
4
0
1
2
3
4
is: 
3
result at 
5
5
0
1
2
3
4
5
is: 
5
result at 
6
6
0
1
2
3
4
5
6
is: 
8
result at 
7
7
0
1
2
3
4
5
6
7
is: 
13
result at 
8
8
0
1
2
3
4
5
6
7
8
is: 
21
result at 
9
9
0
1
2
3
4
5
6
7
8
9
is: 
34
result at 
10
10
0
1
2
3
4
5
6
7
8
9
10
is: 
55
result at 
11
11
0
1
2
3
4
5
6
7
8
9
10
11
is: 
89
result at 
12
12
0
1
2
3
4
5
6
7
8
9
10
11
12
is: 
144
