expanding program
expanding program header
returning: (Keyword,program)
returning: (Identifier,test_program)
returning: (Keyword,is)
expanding program body
returning: (Keyword,type)
expanding declaration
expanding type declaration
returning: (Identifier,fibb_result)
returning: (Keyword,is)
expanding type mark
returning: (Keyword,integer)
returning: (Semicolon,;)
returning: (Keyword,global)
expanding declaration
returning: (Keyword,variable)
expanding variable declaration
returning: (Identifier,x)
returning: (Colon,:)
expanding type mark
returning: (Keyword,integer)
returning: (Semicolon,;)
returning: (Keyword,variable)
expanding declaration
expanding variable declaration
returning: (Identifier,i)
returning: (Colon,:)
expanding type mark
returning: (Keyword,integer)
returning: (Semicolon,;)
returning: (Keyword,variable)
expanding declaration
expanding variable declaration
returning: (Identifier,q)
returning: (Colon,:)
expanding type mark
returning: (Keyword,integer)
returning: (Semicolon,;)
returning: (Keyword,procedure)
expanding declaration
expanding procedure declaration
expanding procedure header
returning: (Identifier,fibb)
returning: (Colon,:)
expanding type mark
returning: (Keyword,integer)
returning: (Paren,()
returning: (Keyword,variable)
expanding parameter list
expanding parameter
expanding variable declaration
returning: (Identifier,n)
returning: (Colon,:)
expanding type mark
returning: (Keyword,integer)
returning: (Paren,))
n
(<ir.Argument '.1' of type i64>,)
expanding procedure body
returning: (Keyword,begin)
('Keyword', 'begin')
FOUND THE PROCEDURE BEGIN
returning: (Keyword,if)
expanding statement
expanding if statement
returning: (Paren,()
expanding expression
returning: (Identifier,n)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'n')
name or procedure call?
expanding name or procedure
returning: (Identifier,==)
expanding name
{'type': 'integer', 'bound': None, 'procedure': False, 'val': <ir.Argument '.1' of type i64>}
type in name_or_procedure: integer
type in factor: integer
AT THE END OF FACTOR, val= 
i64 %".1"
value in term after factor is ('Identifier', '==')
value in relation after term is ('Identifier', '==')
expanding relation
expanding term
expanding factor
returning: (Digit,12)
in factor ('Digit', '12')
acceptable: digit
type in factor: integer
AT THE END OF FACTOR, val= 
i64 12
returning: (Paren,))
value in term after factor is ('Paren', ')')
value in relation after term is ('Paren', ')')
value in arithop after relation is ('Paren', ')')
returning: (Keyword,then)
expanding statement
returning: (Identifier,x)
expanding assignment statement
expanding destination
returning: (Assignment,:=)
expanding expression
returning: (Digit,1)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Digit', '1')
acceptable: digit
type in factor: integer
AT THE END OF FACTOR, val= 
i64 1
returning: (Semicolon,;)
value in term after factor is ('Semicolon', ';')
value in relation after term is ('Semicolon', ';')
value in arithop after relation is ('Semicolon', ';')
type in assignment_statement: integer
Value in assignment statement
i64 1
returning: (Keyword,else)
returning: (Identifier,x)
expanding statement
expanding assignment statement
expanding destination
returning: (Assignment,:=)
expanding expression
returning: (Digit,2)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Digit', '2')
acceptable: digit
type in factor: integer
AT THE END OF FACTOR, val= 
i64 2
returning: (Semicolon,;)
value in term after factor is ('Semicolon', ';')
value in relation after term is ('Semicolon', ';')
value in arithop after relation is ('Semicolon', ';')
type in assignment_statement: integer
Value in assignment statement
i64 2
matching semicolon in if_statement
returning: (Identifier,x)
expanding statement
expanding assignment statement
expanding destination
returning: (Assignment,:=)
expanding expression
returning: (Identifier,x)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'x')
name or procedure call?
expanding name or procedure
returning: (ArithOp,+)
expanding name
{'type': 'integer', 'bound': None, 'procedure': False, 'val': <ir.Constant type='i64' value=2>}
type in name_or_procedure: integer
type in factor: integer
AT THE END OF FACTOR, val= 
i64 2
value in term after factor is ('ArithOp', '+')
value in relation after term is ('ArithOp', '+')
value in arithop after relation is ('ArithOp', '+')
expanding arithOp
expanding relation
expanding term
expanding factor
returning: (Identifier,n)
in factor ('Identifier', 'n')
name or procedure call?
expanding name or procedure
returning: (Semicolon,;)
expanding name
{'type': 'integer', 'bound': None, 'procedure': False, 'val': <ir.Argument '.1' of type i64>}
type in name_or_procedure: integer
type in factor: integer
AT THE END OF FACTOR, val= 
i64 %".1"
value in term after factor is ('Semicolon', ';')
value in relation after term is ('Semicolon', ';')
value in arithop after relation is ('Semicolon', ';')
ADDING IN ARITHOP
i64 2
i64 %".1"
type in assignment_statement: integer
Value in assignment statement
%".6" = add i64 2, %".1"
matching semicolon in if_statement
returning: (Keyword,end)
('Keyword', 'end')
returning: (Keyword,if)
returning: (Semicolon,;)
returning: (Keyword,return)
expanding statement
expanding return statement
expanding expression
returning: (Identifier,x)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'x')
name or procedure call?
expanding name or procedure
returning: (ArithOp,+)
expanding name
{'type': 'integer', 'bound': None, 'procedure': False, 'val': <ir.Instruction '.6' of type 'i64', opname 'add', operands (<ir.Constant type='i64' value=2>, <ir.Argument '.1' of type i64>)>}
type in name_or_procedure: integer
type in factor: integer
AT THE END OF FACTOR, val= 
%".6" = add i64 2, %".1"
value in term after factor is ('ArithOp', '+')
value in relation after term is ('ArithOp', '+')
value in arithop after relation is ('ArithOp', '+')
expanding arithOp
expanding relation
expanding term
expanding factor
returning: (Digit,3)
in factor ('Digit', '3')
acceptable: digit
type in factor: integer
AT THE END OF FACTOR, val= 
i64 3
returning: (Semicolon,;)
value in term after factor is ('Semicolon', ';')
value in relation after term is ('Semicolon', ';')
value in arithop after relation is ('Semicolon', ';')
ADDING IN ARITHOP
%".6" = add i64 2, %".1"
i64 3
%".8" = add i64 %".6", 3
returning: (Keyword,end)
FOUND THE PROCEDURE END
returning: (Keyword,procedure)
RETURN CONTROL TO PROGRAM
returning: (Semicolon,;)
returning: (Keyword,begin)
MOVING ON TO PROGRAM CODE FINALLY
returning: (Identifier,fibb_result)
expanding statement
expanding assignment statement
expanding destination
returning: (Assignment,:=)
expanding expression
returning: (Identifier,fibb)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'fibb')
name or procedure call?
expanding name or procedure
returning: (Paren,()
expanding procedure call
in expand procedure call:  ('Paren', '(')
returning: (Digit,12)
expanding argument list
expanding expression
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Digit', '12')
acceptable: digit
type in factor: integer
AT THE END OF FACTOR, val= 
i64 12
returning: (Paren,))
value in term after factor is ('Paren', ')')
value in relation after term is ('Paren', ')')
value in arithop after relation is ('Paren', ')')
val in argument list after expression ('Paren', ')')
Here I am right before the die
type in name_or_procedure: integer
type in factor: integer
AT THE END OF FACTOR, val= 
%".2" = call i64 @"34cb5678-74ae-4342-97ff-8c910ce81114"(i64 12)
returning: (Semicolon,;)
value in term after factor is ('Semicolon', ';')
value in relation after term is ('Semicolon', ';')
value in arithop after relation is ('Semicolon', ';')
type in assignment_statement: integer
Value in assignment statement
%".2" = call i64 @"34cb5678-74ae-4342-97ff-8c910ce81114"(i64 12)
Back in program body, tmp is ('Semicolon', ';')
returning: (Identifier,q)
expanding statement
expanding assignment statement
expanding destination
returning: (Assignment,:=)
expanding expression
returning: (Digit,5)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Digit', '5')
acceptable: digit
type in factor: integer
AT THE END OF FACTOR, val= 
i64 5
returning: (Semicolon,;)
value in term after factor is ('Semicolon', ';')
value in relation after term is ('Semicolon', ';')
value in arithop after relation is ('Semicolon', ';')
type in assignment_statement: integer
Value in assignment statement
i64 5
Back in program body, tmp is ('Semicolon', ';')
returning: (Keyword,for)
expanding statement
expanding for statement
returning: (Paren,()
expanding assignment statement
expanding destination
returning: (Identifier,i)
returning: (Assignment,:=)
expanding expression
returning: (Digit,5)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Digit', '5')
acceptable: digit
type in factor: integer
AT THE END OF FACTOR, val= 
i64 5
returning: (Semicolon,;)
value in term after factor is ('Semicolon', ';')
value in relation after term is ('Semicolon', ';')
value in arithop after relation is ('Semicolon', ';')
type in assignment_statement: integer
Value in assignment statement
i64 5
expanding expression
returning: (Identifier,i)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'i')
name or procedure call?
expanding name or procedure
returning: (Relation,<)
expanding name
{'type': 'integer', 'bound': None, 'procedure': False, 'val': <ir.Constant type='i64' value=5>}
type in name_or_procedure: integer
type in factor: integer
AT THE END OF FACTOR, val= 
i64 5
value in term after factor is ('Relation', '<')
value in relation after term is ('Relation', '<')
expanding relation
expanding term
expanding factor
returning: (Identifier,fibb_result)
in factor ('Identifier', 'fibb_result')
name or procedure call?
expanding name or procedure
returning: (Paren,))
expanding name
{'type': 'integer', 'bound': None, 'procedure': False, 'val': <ir.CallInstr '.2' of type 'i64', opname 'call', operands [<ir.Function '34cb5678-74ae-4342-97ff-8c910ce81114' of type 'i64 (i64)*'>, <ir.Constant type='i64' value=12>]>}
type in name_or_procedure: integer
type in factor: integer
AT THE END OF FACTOR, val= 
%".2" = call i64 @"34cb5678-74ae-4342-97ff-8c910ce81114"(i64 12)
value in term after factor is ('Paren', ')')
value in relation after term is ('Paren', ')')
value in arithop after relation is ('Paren', ')')
%".4" = icmp slt i64 5, %".2"
here i am discarding the ) in for_statement
returning: (Identifier,x)
In the while in for statement ('Identifier', 'x')
expanding statement
expanding assignment statement
expanding destination
returning: (Assignment,:=)
expanding expression
returning: (Identifier,x)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'x')
name or procedure call?
expanding name or procedure
returning: (ArithOp,+)
expanding name
{'type': 'integer', 'bound': None, 'procedure': False, 'val': <ir.Instruction '.6' of type 'i64', opname 'add', operands (<ir.Constant type='i64' value=2>, <ir.Argument '.1' of type i64>)>}
type in name_or_procedure: integer
type in factor: integer
AT THE END OF FACTOR, val= 
%".6" = add i64 2, %".1"
value in term after factor is ('ArithOp', '+')
value in relation after term is ('ArithOp', '+')
value in arithop after relation is ('ArithOp', '+')
expanding arithOp
expanding relation
expanding term
expanding factor
returning: (Identifier,i)
in factor ('Identifier', 'i')
name or procedure call?
expanding name or procedure
returning: (Semicolon,;)
expanding name
{'type': 'integer', 'bound': None, 'procedure': False, 'val': <ir.Constant type='i64' value=5>}
type in name_or_procedure: integer
type in factor: integer
AT THE END OF FACTOR, val= 
i64 5
value in term after factor is ('Semicolon', ';')
value in relation after term is ('Semicolon', ';')
value in arithop after relation is ('Semicolon', ';')
ADDING IN ARITHOP
%".6" = add i64 2, %".1"
i64 5
type in assignment_statement: integer
Value in assignment statement
%".6" = add i64 %".6", 5
returning: (Keyword,end)
returning: (Keyword,for)
returning: (Semicolon,;)
Back in program body, tmp is ('Semicolon', ';')
returning: (Keyword,end)
returning: (Keyword,program)
returning: (Period,.)
returning: (EOF,eof)
[{'getbool': {'type': 'bool', 'bound': None, 'procedure': True, 'val': None}, 'getinteger': {'type': 'integer', 'bound': None, 'procedure': True, 'val': None}, 'getfloat': {'type': 'float', 'bound': None, 'procedure': True, 'val': None}, 'getstring': {'type': 'string', 'bound': None, 'procedure': True, 'val': None}, 'putbool': {'type': 'bool', 'bound': None, 'procedure': True, 'val': None}, 'putinteger': {'type': 'bool', 'bound': None, 'procedure': True, 'val': None}, 'putfloat': {'type': 'bool', 'bound': None, 'procedure': True, 'val': None}, 'putstring': {'type': 'bool', 'bound': None, 'procedure': True, 'val': None}, 'sqrt': {'type': 'float', 'bound': None, 'procedure': True, 'val': None}, 'x': {'type': 'integer', 'bound': None, 'procedure': False, 'val': <ir.Instruction '.6' of type 'i64', opname 'add', operands (<ir.Instruction '.6' of type 'i64', opname 'add', operands (<ir.Constant type='i64' value=2>, <ir.Argument '.1' of type i64>)>, <ir.Constant type='i64' value=5>)>}}, {'fibb_result': {'type': 'integer', 'bound': None, 'procedure': False, 'val': <ir.CallInstr '.2' of type 'i64', opname 'call', operands [<ir.Function '34cb5678-74ae-4342-97ff-8c910ce81114' of type 'i64 (i64)*'>, <ir.Constant type='i64' value=12>]>}, 'i': {'type': 'integer', 'bound': None, 'procedure': False, 'val': <ir.Instruction '.7' of type 'i64', opname 'add', operands (<ir.Constant type='i64' value=5>, <ir.Constant type='i64' value=1>)>}, 'q': {'type': 'integer', 'bound': None, 'procedure': False, 'val': <ir.Constant type='i64' value=5>}, 'fibb': {'type': 'integer', 'bound': None, 'procedure': True, 'val': <ir.Function '34cb5678-74ae-4342-97ff-8c910ce81114' of type 'i64 (i64)*'>}}]
; ModuleID = "program"
target triple = "unknown-unknown-unknown"
target datalayout = ""

define i64 @"main_function"() 
{
main_entry:
  %".2" = call i64 @"34cb5678-74ae-4342-97ff-8c910ce81114"(i64 12)
  br label %"for_start"
for_start:
  %".4" = icmp slt i64 5, %".2"
  br i1 %".4", label %"for_body", label %"for_after"
for_body:
  %".6" = add i64 %".6", 5
  %".7" = add i64 5, 1
  br label %"for_start"
for_after:
  ret i64 1
}

define i64 @"34cb5678-74ae-4342-97ff-8c910ce81114"(i64 %".1") 
{
function_entry:
  %".3" = icmp eq i64 %".1", 12
  br i1 %".3", label %"function_entry.if", label %"function_entry.else"
function_entry.if:
  br label %"function_entry.endif"
function_entry.else:
  %".6" = add i64 2, %".1"
  br label %"function_entry.endif"
function_entry.endif:
  %".8" = add i64 %".6", 3
  ret i64 %".8"
}

