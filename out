ERROR:root:{"error": "type mismatch", "details": "cannot resolve 'bool' and 'string'", "lineno": 12, "traceback": "check_types"}
ERROR:root:{"error": "type mismatch", "details": "cannot resolve 'integer' and 'string'", "lineno": 13, "traceback": "check_types"}
ERROR:root:{"error": "type mismatch", "details": "cannot resolve 'integer' and 'string'", "lineno": 16, "traceback": "check_types"}
ERROR:root:{"error": "type mismatch", "details": "cannot resolve 'string' and 'bool'", "lineno": 19, "traceback": "check_types"}
ERROR:root:{"error": "type mismatch", "details": "cannot resolve 'string' and 'integer'", "lineno": 20, "traceback": "check_types"}
ERROR:root:{"error": "missing assignment operator", "details": "expected ':=', got '('", "lineno": 22, "traceback": "assignment_statement"}
ERROR:root:{"error": "missing semicolon", "details": "expected ';', got 'arr'", "lineno": 22, "traceback": "program_body"}
ERROR:root:{"error": "missing period", "details": "expected '.', got '['", "lineno": 22, "traceback": "program"}
; ModuleID = "program"
target triple = "unknown-unknown-unknown"
target datalayout = ""

declare i64 @"getbool"() 

declare i64 @"getinteger"() 

declare double @"getfloat"() 

declare i64 @"getstring"([256 x i8]* %".1") 

declare i64 @"putbool"(i64 %".1") 

declare i64 @"putinteger"(i64 %".1") 

declare i64 @"putfloat"(double %".1") 

declare i64 @"putstring"([256 x i8]* %".1") 

declare double @"sqrtt"(i64 %".1") 

declare i64 @"strcomp"([256 x i8]* %".1", [256 x i8]* %".2") 

define i64 @"main_function"() 
{
main_entry:
  %"x" = alloca [256 x i8]
  %"res" = alloca i64
  %"arr" = alloca [3 x i64]
  store [256 x i8] c"a\0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", [256 x i8]* @"x"
  %".3" = load [256 x i8], [256 x i8]* @"x"
  %".4" = load [256 x i8], [256 x i8]* @"x"
  %".5" = icmp eq i64 1, 1
  br i1 %".5", label %"main_entry.if", label %"main_entry.else"
main_entry.if:
  %".7" = load [256 x i8], [256 x i8]* @"x"
  br label %"main_entry.endif"
main_entry.else:
  br label %"main_entry.endif"
main_entry.endif:
  %".10" = load i64, i64* %"res"
  ret i64 1
}

@"x" = internal global [256 x i8] undef
