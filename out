[]
declare i64 @"getbool"() 

[]
declare i64 @"getinteger"() 

[]
declare double @"getfloat"() 

(<<class 'llvmlite.ir.types.PointerType'> [256 x i8]*>,)
declare [256 x i8] @"getstring"([256 x i8]* %".1") 

(<<class 'llvmlite.ir.types.PointerType'> i64*>,)
declare i64 @"putbool"(i64* %".1") 

(<<class 'llvmlite.ir.types.PointerType'> i64*>,)
declare i64 @"putinteger"(i64* %".1") 

(<<class 'llvmlite.ir.types.PointerType'> double*>,)
declare i64 @"putfloat"(double* %".1") 

(<<class 'llvmlite.ir.types.PointerType'> [256 x i8]*>,)
declare i64 @"putstring"([256 x i8]* %".1") 

(<<class 'llvmlite.ir.types.PointerType'> double*>,)
declare double @"sqrtt"(double* %".1") 

(<<class 'llvmlite.ir.types.PointerType'> [256 x i8]*>, <<class 'llvmlite.ir.types.PointerType'> [256 x i8]*>)
declare i64 @"strcomp"([256 x i8]* %".1", [256 x i8]* %".2") 

expanding program
expanding program header
returning: (Keyword,program)
returning: (Identifier,test_program)
returning: (Keyword,is)
expanding program body
returning: (Keyword,global)
expanding declaration
returning: (Keyword,variable)
expanding variable declaration
returning: (Identifier,glob)
returning: (Colon,:)
expanding type mark
returning: (Keyword,integer)
returning: (Semicolon,;)
returning: (Keyword,variable)
expanding declaration
expanding variable declaration
returning: (Identifier,out)
returning: (Colon,:)
expanding type mark
returning: (Keyword,bool)
returning: (Semicolon,;)
returning: (Keyword,variable)
expanding declaration
expanding variable declaration
returning: (Identifier,one)
returning: (Colon,:)
expanding type mark
returning: (Keyword,integer)
returning: (Semicolon,;)
returning: (Keyword,variable)
expanding declaration
expanding variable declaration
returning: (Identifier,two)
returning: (Colon,:)
expanding type mark
returning: (Keyword,integer)
returning: (Semicolon,;)
returning: (Keyword,variable)
expanding declaration
expanding variable declaration
returning: (Identifier,three)
returning: (Colon,:)
expanding type mark
returning: (Keyword,integer)
returning: (Semicolon,;)
returning: (Keyword,variable)
expanding declaration
expanding variable declaration
returning: (Identifier,four)
returning: (Colon,:)
expanding type mark
returning: (Keyword,integer)
returning: (Semicolon,;)
returning: (Keyword,variable)
expanding declaration
expanding variable declaration
returning: (Identifier,test)
returning: (Colon,:)
expanding type mark
returning: (Keyword,enum)
expanding enum
returning: (Identifier,{)
returning: (Identifier,one)
returning: (Comma,,)
returning: (Identifier,two)
returning: (Comma,,)
returning: (Identifier,three)
returning: (Comma,,)
returning: (Identifier,four)
returning: (Identifier,})
returning: (Semicolon,;)
returning: (Keyword,begin)
MOVING ON TO PROGRAM CODE FINALLY
returning: (Identifier,glob)
expanding statement
('Identifier', 'glob')
expanding assignment statement
expanding destination
returning: (Assignment,:=)
('Assignment', ':=')
expanding expression
returning: (Digit,2)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Digit', '2')
acceptable: digit
type in factor: integer
AT THE END OF FACTOR, val= 
i64 2
returning: (Semicolon,;)
value in term after factor is ('Semicolon', ';')
integer
value in relation after term is ('Semicolon', ';')
integer
value in arithop after relation is ('Semicolon', ';')
val in expression after arithOp is i64 2 integer
type in assignment_statement: integer
i64 2
@"glob" = internal global i64 undef
Back in program body, tmp is ('Semicolon', ';')
returning: (Identifier,out)
expanding statement
('Identifier', 'out')
expanding assignment statement
expanding destination
returning: (Assignment,:=)
('Assignment', ':=')
expanding expression
returning: (Identifier,putinteger)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'putinteger')
name or procedure call?
expanding name or procedure
('Identifier', 'putinteger')
returning: (Paren,()
expanding procedure call
in expand procedure call:  ('Paren', '(')
returning: (Identifier,one)
('Identifier', 'putinteger')
expanding argument list
expanding expression
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'one')
name or procedure call?
expanding name or procedure
('Identifier', 'one')
returning: (Paren,))
expanding name
{'type': 'integer', 'bound': None, 'procedure': False, 'val': <ir.AllocaInstr 'one.1' of type 'i64*', opname 'alloca', operands ()>}
type in name_or_procedure: integer
type in factor: integer
AT THE END OF FACTOR, val= 
%".7" = load i64, i64* %"one.1"
value in term after factor is ('Paren', ')')
integer
value in relation after term is ('Paren', ')')
integer
value in arithop after relation is ('Paren', ')')
val in expression after arithOp is %".7" = load i64, i64* %"one.1" integer
val in argument list after expression ('Paren', ')')
[(<ir.LoadInstr '.7' of type 'i64', opname 'load', operands [<ir.AllocaInstr 'one.1' of type 'i64*', opname 'alloca', operands ()>]>, 'integer')]
Here I am right before the die
declare i64 @"putinteger"(i64* %".1") 
 [<ir.AllocaInstr '.8' of type 'i64*', opname 'alloca', operands ()>]
and here:  %".10" = call i64 @"putinteger"(i64* %".8")
type in name_or_procedure: bool
type in factor: bool
AT THE END OF FACTOR, val= 
%".10" = call i64 @"putinteger"(i64* %".8")
returning: (Semicolon,;)
value in term after factor is ('Semicolon', ';')
bool
value in relation after term is ('Semicolon', ';')
bool
value in arithop after relation is ('Semicolon', ';')
val in expression after arithOp is %".10" = call i64 @"putinteger"(i64* %".8") bool
type in assignment_statement: bool
%".10" = call i64 @"putinteger"(i64* %".8")
%"out" = alloca i64
Back in program body, tmp is ('Semicolon', ';')
returning: (Identifier,out)
expanding statement
('Identifier', 'out')
expanding assignment statement
expanding destination
returning: (Assignment,:=)
('Assignment', ':=')
expanding expression
returning: (Identifier,putinteger)
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'putinteger')
name or procedure call?
expanding name or procedure
('Identifier', 'putinteger')
returning: (Paren,()
expanding procedure call
in expand procedure call:  ('Paren', '(')
returning: (Identifier,four)
('Identifier', 'putinteger')
expanding argument list
expanding expression
expanding arithOp
expanding relation
expanding term
expanding factor
in factor ('Identifier', 'four')
name or procedure call?
expanding name or procedure
('Identifier', 'four')
returning: (Paren,))
expanding name
{'type': 'integer', 'bound': None, 'procedure': False, 'val': <ir.AllocaInstr 'four.1' of type 'i64*', opname 'alloca', operands ()>}
type in name_or_procedure: integer
type in factor: integer
AT THE END OF FACTOR, val= 
%".12" = load i64, i64* %"four.1"
value in term after factor is ('Paren', ')')
integer
value in relation after term is ('Paren', ')')
integer
value in arithop after relation is ('Paren', ')')
val in expression after arithOp is %".12" = load i64, i64* %"four.1" integer
val in argument list after expression ('Paren', ')')
[(<ir.LoadInstr '.12' of type 'i64', opname 'load', operands [<ir.AllocaInstr 'four.1' of type 'i64*', opname 'alloca', operands ()>]>, 'integer')]
Here I am right before the die
declare i64 @"putinteger"(i64* %".1") 
 [<ir.AllocaInstr '.13' of type 'i64*', opname 'alloca', operands ()>]
and here:  %".15" = call i64 @"putinteger"(i64* %".13")
type in name_or_procedure: bool
type in factor: bool
AT THE END OF FACTOR, val= 
%".15" = call i64 @"putinteger"(i64* %".13")
returning: (Semicolon,;)
value in term after factor is ('Semicolon', ';')
bool
value in relation after term is ('Semicolon', ';')
bool
value in arithop after relation is ('Semicolon', ';')
val in expression after arithOp is %".15" = call i64 @"putinteger"(i64* %".13") bool
type in assignment_statement: bool
%".15" = call i64 @"putinteger"(i64* %".13")
%"out" = alloca i64
Back in program body, tmp is ('Semicolon', ';')
returning: (Keyword,end)
returning: (Keyword,program)
returning: (Period,.)
returning: (EOF,eof)
[{'getbool': {'type': 'bool', 'bound': None, 'procedure': True, 'val': <ir.Function 'getbool' of type 'i64 ()*'>}, 'getinteger': {'type': 'integer', 'bound': None, 'procedure': True, 'val': <ir.Function 'getinteger' of type 'i64 ()*'>}, 'getfloat': {'type': 'float', 'bound': None, 'procedure': True, 'val': <ir.Function 'getfloat' of type 'double ()*'>}, 'getstring': {'type': 'string', 'bound': None, 'procedure': True, 'val': <ir.Function 'getstring' of type '[256 x i8] ([256 x i8]*)*'>}, 'putbool': {'type': 'bool', 'bound': None, 'procedure': True, 'val': <ir.Function 'putbool' of type 'i64 (i64*)*'>}, 'putinteger': {'type': 'bool', 'bound': None, 'procedure': True, 'val': <ir.Function 'putinteger' of type 'i64 (i64*)*'>}, 'putfloat': {'type': 'bool', 'bound': None, 'procedure': True, 'val': <ir.Function 'putfloat' of type 'i64 (double*)*'>}, 'putstring': {'type': 'bool', 'bound': None, 'procedure': True, 'val': <ir.Function 'putstring' of type 'i64 ([256 x i8]*)*'>}, 'sqrt': {'type': 'float', 'bound': None, 'procedure': True, 'val': <ir.Function 'sqrtt' of type 'double (double*)*'>}, 'strcomp': {'type': 'bool', 'bound': None, 'procedure': True, 'val': <ir.Function 'strcomp' of type 'i64 ([256 x i8]*, [256 x i8]*)*'>}, 'glob': {'type': 'integer', 'bound': None, 'procedure': False, 'val': <ir.GlobalVariable 'glob' of type 'i64*'>}}, {'out': {'type': 'bool', 'bound': None, 'procedure': False, 'val': <ir.AllocaInstr 'out' of type 'i64*', opname 'alloca', operands ()>}, 'one': {'type': 'integer', 'bound': None, 'procedure': False, 'val': <ir.AllocaInstr 'one.1' of type 'i64*', opname 'alloca', operands ()>}, 'two': {'type': 'integer', 'bound': None, 'procedure': False, 'val': <ir.AllocaInstr 'two.1' of type 'i64*', opname 'alloca', operands ()>}, 'three': {'type': 'integer', 'bound': None, 'procedure': False, 'val': <ir.AllocaInstr 'three.1' of type 'i64*', opname 'alloca', operands ()>}, 'four': {'type': 'integer', 'bound': None, 'procedure': False, 'val': <ir.AllocaInstr 'four.1' of type 'i64*', opname 'alloca', operands ()>}, 'test': {'type': 'enum', 'bound': None, 'procedure': False, 'val': <ir.AllocaInstr 'test' of type 'i64*', opname 'alloca', operands ()>}}]
; ModuleID = "program"
target triple = "unknown-unknown-unknown"
target datalayout = ""

declare i64 @"getbool"() 

declare i64 @"getinteger"() 

declare double @"getfloat"() 

declare [256 x i8] @"getstring"([256 x i8]* %".1") 

declare i64 @"putbool"(i64* %".1") 

declare i64 @"putinteger"(i64* %".1") 

declare i64 @"putfloat"(double* %".1") 

declare i64 @"putstring"([256 x i8]* %".1") 

declare double @"sqrtt"(double* %".1") 

declare i64 @"strcomp"([256 x i8]* %".1", [256 x i8]* %".2") 

define i64 @"main_function"() 
{
main_entry:
  %"glob" = alloca i64
  %"out" = alloca i64
  %"one" = alloca i64
  %"two" = alloca i64
  %"three" = alloca i64
  %"four" = alloca i64
  %"one.1" = alloca i64
  store i64 0, i64* %"one.1"
  %"two.1" = alloca i64
  store i64 1, i64* %"two.1"
  %"three.1" = alloca i64
  store i64 2, i64* %"three.1"
  %"four.1" = alloca i64
  store i64 3, i64* %"four.1"
  %"test" = alloca i64
  store i64 2, i64* @"glob"
  %".7" = load i64, i64* %"one.1"
  %".8" = alloca i64
  store i64 %".7", i64* %".8"
  %".10" = call i64 @"putinteger"(i64* %".8")
  store i64 %".10", i64* %"out"
  %".12" = load i64, i64* %"four.1"
  %".13" = alloca i64
  store i64 %".12", i64* %".13"
  %".15" = call i64 @"putinteger"(i64* %".13")
  store i64 %".15", i64* %"out"
  ret i64 1
}

@"glob" = internal global i64 undef
RES: 1
0
3
